plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runConfigs.configureEach {
        if (name == "client") {
            runDir = "../run"

            if (System.getenv('MC_USERNAME') && System.getenv('MC_UUID') && System.getenv('MC_ACCESS_TOKEN')) {
                programArgs '--username', System.getenv('MC_USERNAME'), '--uuid', System.getenv('MC_UUID'), '--accessToken', System.getenv('MC_ACCESS_TOKEN')
            }
        } else if (name == "server") {
            runDir = "../run/server-neoforge"
        }
    }
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    // MidnightLib
    modImplementation include ("maven.modrinth:midnightlib:${rootProject.midnightlib_version}-neoforge")

    // Player Animator
//    modImplementation include("dev.kosmx.player-anim:player-animation-lib-forge:${rootProject.player_animator_version}")

    // Accessories
    modImplementation("io.wispforest:accessories-neoforge:${rootProject.accessories_version}")
    forgeRuntimeLibrary("blue.endless:jankson:1.2.2")
    forgeRuntimeLibrary("io.wispforest:endec:0.1.9")
    forgeRuntimeLibrary("io.wispforest.endec:gson:0.1.5")
    forgeRuntimeLibrary("io.wispforest.endec:jankson:0.1.6")
    forgeRuntimeLibrary("io.wispforest.endec:netty:0.1.5")

    // Mocha
    implementation include ("team.unnamed:mocha:3.0.0")
    forgeRuntimeLibrary ("team.unnamed:mocha:3.0.0")
    implementation include ("org.javassist:javassist:3.30.2-GA")
    forgeRuntimeLibrary ("org.javassist:javassist:3.30.2-GA")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle(project(path: ':common', configuration: 'transformProductionNeoForge')) { transitive false }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
    atAccessWideners.add "palladium.accessWidener"
}
